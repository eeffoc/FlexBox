package layout;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 * GUI for the order class.
 * @author Klaudijus, Markus, Lukas UoP
 */
public class FlexBoxGUI extends javax.swing.JFrame {
    
    //Used for refferencing the Order class as being the super class.
    flexbox.Order ord;
    
    /**
     * Creates new form FlexBoxGUI
     * @param in order instance to use.
     */ 
    public FlexBoxGUI(flexbox.Order in) {
        initComponents(); //Initiates components.
        
        //Add a new Item GUI is hidden untill user clicks "Add to Order" button.
        AddNewItem.setVisible(false); 
        
        //When given the parameter "null" - GUI gets positioned in the center.
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        
        /* Refference Order class as super class. 
            To call the methods from Order.*/
        ord = in;
        
        //Hides the warning of "Can't have corners without bottoms."
        CornerWarning.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ColourButtons = new javax.swing.ButtonGroup();
        AddNewItem = new javax.swing.JFrame();
        GradeSlider = new javax.swing.JSlider();
        ColourRadio0 = new javax.swing.JRadioButton();
        ColourRadio2 = new javax.swing.JRadioButton();
        ColourRadio1 = new javax.swing.JRadioButton();
        SealableCheckbox = new javax.swing.JCheckBox();
        BottomCheckbox = new javax.swing.JCheckBox();
        CornerCheckbox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();
        QuantityInput = new javax.swing.JEditorPane();
        WidthInput = new javax.swing.JEditorPane();
        LengthInput = new javax.swing.JEditorPane();
        HeightInput = new javax.swing.JEditorPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        CalculateCostButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        PriceLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        CornerWarning = new javax.swing.JLabel();
        Label_Main = new javax.swing.JLabel();
        Label_CurrOrd = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Label_Total = new javax.swing.JLabel();
        Label_TotalSum = new javax.swing.JLabel();
        Button_AddBox = new javax.swing.JButton();
        Button_CheckOut = new javax.swing.JButton();
        Button_RemoveBox = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        Button_EditBox = new javax.swing.JButton();

        AddNewItem.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        AddNewItem.setTitle("Add New Item");
        AddNewItem.setMinimumSize(new java.awt.Dimension(720, 450));
        AddNewItem.setResizable(false);
        AddNewItem.setSize(new java.awt.Dimension(720, 380));
        AddNewItem.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                AddNewItemWindowClosing(evt);
            }
        });
        AddNewItem.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GradeSlider.setMajorTickSpacing(1);
        GradeSlider.setMaximum(5);
        GradeSlider.setMinimum(1);
        GradeSlider.setMinorTickSpacing(1);
        GradeSlider.setPaintLabels(true);
        GradeSlider.setSnapToTicks(true);
        GradeSlider.setValue(1);
        AddNewItem.getContentPane().add(GradeSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 180, 30));

        ColourButtons.add(ColourRadio0);
        ColourRadio0.setText("No colour");
        ColourRadio0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColourRadio0ActionPerformed(evt);
            }
        });
        AddNewItem.getContentPane().add(ColourRadio0, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, -1, -1));

        ColourButtons.add(ColourRadio2);
        ColourRadio2.setText("Two Coloured");
        ColourRadio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColourRadio2ActionPerformed(evt);
            }
        });
        AddNewItem.getContentPane().add(ColourRadio2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, -1, -1));

        ColourButtons.add(ColourRadio1);
        ColourRadio1.setText("Single Coloured");
        ColourRadio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColourRadio1ActionPerformed(evt);
            }
        });
        AddNewItem.getContentPane().add(ColourRadio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));

        SealableCheckbox.setText("Sealable");
        AddNewItem.getContentPane().add(SealableCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 100, -1, -1));

        BottomCheckbox.setText("Reinforced");
        BottomCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomCheckboxActionPerformed(evt);
            }
        });
        AddNewItem.getContentPane().add(BottomCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 100, -1, -1));

        CornerCheckbox.setText("Reinforced");
        CornerCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CornerCheckboxActionPerformed(evt);
            }
        });
        AddNewItem.getContentPane().add(CornerCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(472, 100, -1, -1));
        AddNewItem.getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 720, 10));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        AddNewItem.getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 720, 10));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Grade");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewItem.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 200, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Colour");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewItem.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 135, 20));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Bottom");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewItem.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 50, 125, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Corners");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewItem.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 125, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Top");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewItem.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 50, 125, 20));

        CancelButton.setText("Cancel");
        CancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CancelButtonMousePressed(evt);
            }
        });
        AddNewItem.getContentPane().add(CancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 340, 140, 40));

        QuantityInput.setContentType("int"); // NOI18N
        QuantityInput.setText("1");
        QuantityInput.setAutoscrolls(false);
        QuantityInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QuantityInputKeyTyped(evt);
            }
        });
        AddNewItem.getContentPane().add(QuantityInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, 60, 20));

        WidthInput.setContentType("int"); // NOI18N
        WidthInput.setText("1");
        WidthInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                WidthInputKeyTyped(evt);
            }
        });
        AddNewItem.getContentPane().add(WidthInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 60, 20));

        LengthInput.setContentType("int"); // NOI18N
        LengthInput.setText("1");
        LengthInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LengthInputKeyTyped(evt);
            }
        });
        AddNewItem.getContentPane().add(LengthInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 60, 20));

        HeightInput.setContentType("int"); // NOI18N
        HeightInput.setText("1");
        HeightInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HeightInputKeyTyped(evt);
            }
        });
        AddNewItem.getContentPane().add(HeightInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 60, 20));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Quantity:");
        jLabel8.setPreferredSize(new java.awt.Dimension(62, 15));
        AddNewItem.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, 80, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("cm");
        AddNewItem.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 30, 20));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Length:");
        AddNewItem.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 80, -1));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Height:");
        AddNewItem.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 80, -1));

        CalculateCostButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        CalculateCostButton.setText("Calculate");
        CalculateCostButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CalculateCostButtonMousePressed(evt);
            }
        });
        AddNewItem.getContentPane().add(CalculateCostButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 170, 90, 30));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Box Selection");
        jLabel11.setMaximumSize(new java.awt.Dimension(140, 17));
        jLabel11.setMinimumSize(new java.awt.Dimension(140, 17));
        jLabel11.setPreferredSize(new java.awt.Dimension(140, 17));
        AddNewItem.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PriceLabel.setText("£0.00");
        AddNewItem.getContentPane().add(PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 180, 170, 20));
        AddNewItem.getContentPane().add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 720, 10));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Total Cost:");
        AddNewItem.getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 160, 130, -1));

        AddButton.setText("Add To Basket");
        AddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AddButtonMousePressed(evt);
            }
        });
        AddNewItem.getContentPane().add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 290, 140, 40));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Width:");
        AddNewItem.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 80, -1));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("cm");
        AddNewItem.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 30, 20));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("cm");
        AddNewItem.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 30, 20));

        CornerWarning.setForeground(new java.awt.Color(204, 102, 0));
        CornerWarning.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CornerWarning.setText("Warning! Can't have Reinforced Corners without having Reinforced Bottom!");
        CornerWarning.setMaximumSize(new java.awt.Dimension(720, 15));
        CornerWarning.setMinimumSize(new java.awt.Dimension(720, 15));
        AddNewItem.getContentPane().add(CornerWarning, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 720, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FlexBox");
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        setMaximumSize(new java.awt.Dimension(1000, 550));
        setMinimumSize(new java.awt.Dimension(1000, 550));
        setPreferredSize(new java.awt.Dimension(1000, 550));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 550));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Label_Main.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        Label_Main.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Main.setText("FlexBox");
        getContentPane().add(Label_Main, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, -1));

        Label_CurrOrd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        Label_CurrOrd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_CurrOrd.setText("Current Order:");
        Label_CurrOrd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(Label_CurrOrd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 46, 1000, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 35, 1000, -1));

        Label_Total.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Label_Total.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Label_Total.setText("Total:");
        getContentPane().add(Label_Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 360, 139, -1));

        Label_TotalSum.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Label_TotalSum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_TotalSum.setText("£0.00");
        getContentPane().add(Label_TotalSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 360, 138, -1));

        Button_AddBox.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Button_AddBox.setText("Add New Item");
        Button_AddBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Button_AddBoxMousePressed(evt);
            }
        });
        getContentPane().add(Button_AddBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 150, 45));

        Button_CheckOut.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Button_CheckOut.setText("Check out");
        Button_CheckOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Button_CheckOutMousePressed(evt);
            }
        });
        getContentPane().add(Button_CheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 300, 40));

        Button_RemoveBox.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Button_RemoveBox.setText("Remove Selected");
        Button_RemoveBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Button_RemoveBoxMousePressed(evt);
            }
        });
        getContentPane().add(Button_RemoveBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 150, 45));

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quantity", "Grade", "Width (cm)", "Length (cm)", "Height (cm)", "Coloured", "Bottom", "Corners", "Sealable", "PPI", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        OrderTable.setShowVerticalLines(false);
        OrderTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(OrderTable);
        OrderTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (OrderTable.getColumnModel().getColumnCount() > 0) {
            OrderTable.getColumnModel().getColumn(0).setResizable(false);
            OrderTable.getColumnModel().getColumn(1).setResizable(false);
            OrderTable.getColumnModel().getColumn(2).setResizable(false);
            OrderTable.getColumnModel().getColumn(3).setResizable(false);
            OrderTable.getColumnModel().getColumn(4).setResizable(false);
            OrderTable.getColumnModel().getColumn(5).setResizable(false);
            OrderTable.getColumnModel().getColumn(6).setResizable(false);
            OrderTable.getColumnModel().getColumn(7).setResizable(false);
            OrderTable.getColumnModel().getColumn(8).setResizable(false);
            OrderTable.getColumnModel().getColumn(9).setResizable(false);
            OrderTable.getColumnModel().getColumn(10).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 990, 280));

        Button_EditBox.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Button_EditBox.setText("Edit Selected");
        Button_EditBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Button_EditBoxMousePressed(evt);
            }
        });
        getContentPane().add(Button_EditBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 150, 45));

        getAccessibleContext().setAccessibleDescription("Desktop application for placing orders");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddNewItemWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_AddNewItemWindowClosing
        this.setVisible(true); //Sets main window as visible.
    }//GEN-LAST:event_AddNewItemWindowClosing

    private void ColourRadio0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColourRadio0ActionPerformed
        //If "No Colours" radio is selected - resets everything.
        if (ColourRadio0.isSelected()){
            setGradeSlider(1, 3);
            disableReinforcments();
            CornerWarning.setVisible(false);
        }
    }//GEN-LAST:event_ColourRadio0ActionPerformed

    private void ColourRadio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColourRadio1ActionPerformed
        //If "1 Colour" radio is selected - resets everything.
        if (ColourRadio1.isSelected()){
            setGradeSlider(2, 4);
            disableReinforcments();
            CornerWarning.setVisible(false);
        }
    }//GEN-LAST:event_ColourRadio1ActionPerformed

    private void ColourRadio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColourRadio2ActionPerformed
        //If "2 Colours" radio is selected - resets everything.
        if (ColourRadio2.isSelected()){
            setGradeSlider(2, 5);
            BottomCheckbox.setEnabled(true);
            CornerCheckbox.setEnabled(true);
            BottomCheckbox.setSelected(false);
            CornerCheckbox.setSelected(false);
            CornerWarning.setVisible(false);
        }
    }//GEN-LAST:event_ColourRadio2ActionPerformed

    private void CornerCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CornerCheckboxActionPerformed
        if (CornerCheckbox.isSelected()){
            GradeSlider.setMinimum(3);
            if (!BottomCheckbox.isSelected()){
                BottomCheckbox.setSelected(true);
                CornerWarning.setVisible(true);
            } else CornerWarning.setVisible(false);
        }
        else {
            GradeSlider.setMinimum(2);
            CornerWarning.setVisible(false);
        }
    }//GEN-LAST:event_CornerCheckboxActionPerformed

    private void BottomCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomCheckboxActionPerformed
        if (!BottomCheckbox.isSelected()){
            BottomCheckbox.setSelected(false);
            if (CornerCheckbox.isSelected()) {
                CornerWarning.setVisible(true);
                CornerCheckbox.setSelected(false);
            }
            else CornerWarning.setVisible(false);
        }
        else {
            CornerWarning.setVisible(false);
        }
        setGradeSlider(2, 5);
    }//GEN-LAST:event_BottomCheckboxActionPerformed

    private void WidthInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WidthInputKeyTyped
        //Disables the user to enter more than 4 numbers.
        if (WidthInput.getText().length() <= 3) {
            isNumberInput(evt);
        } else evt.consume();
    }//GEN-LAST:event_WidthInputKeyTyped

    private void LengthInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LengthInputKeyTyped
        //Disables the user to enter more than 4 numbers.
        if (LengthInput.getText().length() <= 3) {
            isNumberInput(evt);
        } else evt.consume();
    }//GEN-LAST:event_LengthInputKeyTyped

    private void HeightInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HeightInputKeyTyped
        //Disables the user to enter more than 4 numbers.
        if (HeightInput.getText().length() <= 3) {
            isNumberInput(evt);
        } else evt.consume();
    }//GEN-LAST:event_HeightInputKeyTyped

    private void QuantityInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuantityInputKeyTyped
        //Disables the user to enter more than 4 numbers.
        if (QuantityInput.getText().length() <= 3) {
            isNumberInput(evt);
        } else evt.consume();
    }//GEN-LAST:event_QuantityInputKeyTyped

    private void CalculateCostButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CalculateCostButtonMousePressed
        ord.addTempBox(false);
    }//GEN-LAST:event_CalculateCostButtonMousePressed

    private void Button_AddBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_AddBoxMousePressed
        AddNewItem.setLocationRelativeTo(null);//Sets window to center of screen
        AddNewItem.setVisible(true); //Shows new window.
        this.setVisible(false); //Hides main window.
        
        //Sets Initial Values.
        setGradeSlider(1, 3); 
        GradeSlider.setValue(1);
        disableReinforcments();
        
        ColourRadio0.setSelected(true);
        WidthInput.setText(String.valueOf(ord.MIN_WIDTH));
        HeightInput.setText(String.valueOf(ord.MIN_HEIGHT));
        LengthInput.setText(String.valueOf(ord.MIN_LENGTH));
        QuantityInput.setText(String.valueOf(ord.MIN_QUANTITY));
        PriceLabel.setText("£0.00");
        SealableCheckbox.setSelected(false);
        CornerWarning.setVisible(false);
    }//GEN-LAST:event_Button_AddBoxMousePressed

    private void Button_RemoveBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_RemoveBoxMousePressed
        ord.removeFromOrderList();
    }//GEN-LAST:event_Button_RemoveBoxMousePressed

    private void AddButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddButtonMousePressed
        ord.addTempBox(true);
    }//GEN-LAST:event_AddButtonMousePressed

    private void CancelButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelButtonMousePressed
        this.setVisible(true);
        AddNewItem.setVisible(false);
    }//GEN-LAST:event_CancelButtonMousePressed

    private void Button_EditBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_EditBoxMousePressed
        if (ord.canEditSelected()){
            this.setVisible(false);
            AddNewItem.setLocationRelativeTo(null);
            AddNewItem.setVisible(true);
            ord.isEditing = true;
            ord.setEditableValues();
        }
    }//GEN-LAST:event_Button_EditBoxMousePressed

    private void Button_CheckOutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_CheckOutMousePressed
        ord.exportOrder();   
    }//GEN-LAST:event_Button_CheckOutMousePressed

    /**
     * Sets all the values of Add New Item window to the selections values
     * for the user to edit his order.
     * @param width previous width
     * @param height previous height
     * @param length previous length
     * @param quantity previous quantity
     * @param sealable were previous boxes needed as sealable
     * @param grade previous grade
     * @param bottom did previous boxes have reinforcced bottom
     * @param corners did previous boxes have reinforcced corners
     * @param colour previous colour
     * @param type previous type
     * @param price  previous total price
     */
    public void updateAddNewBoxValues(int width, int height, int length, 
                    int quantity, boolean sealable, int grade, boolean bottom, 
                    boolean corners, int colour, int type, float price){
        
        CornerWarning.setVisible(false); //Hides warning.
        
        //Updates all the GUI elements.
        switch (colour){
            case 0:
                ColourRadio0.setSelected(true);
                break;
            case 1:
                ColourRadio1.setSelected(true);
                break;
            case 2:
                ColourRadio2.setSelected(true);
                break;
        }
        
        switch (type) {
            case 1:
                setGradeSlider(1,3);
                disableReinforcments();
                break;
            case 2:
                setGradeSlider(2,4);
                disableReinforcments();
                break;
            case 3:
                setGradeSlider(2,5);
                BottomCheckbox.setEnabled(true);
                CornerCheckbox.setEnabled(true);
                break;
            case 4:
                setGradeSlider(2,5);
                BottomCheckbox.setEnabled(true);
                CornerCheckbox.setEnabled(true);
                break;
            case 5:
                setGradeSlider(3,5);
                BottomCheckbox.setEnabled(true);
                CornerCheckbox.setEnabled(true);
                break;
        }
        
        GradeSlider.setValue(grade);
        
        if (sealable) SealableCheckbox.setSelected(true);
        else SealableCheckbox.setSelected(false);
        
        if (bottom) BottomCheckbox.setSelected(true);
        else BottomCheckbox.setSelected(false);
        
        if (corners) CornerCheckbox.setSelected(true);
        else CornerCheckbox.setSelected(false);
        
        WidthInput.setText(String.valueOf(width));
        HeightInput.setText(String.valueOf(height));
        LengthInput.setText(String.valueOf(length));
        QuantityInput.setText(String.valueOf(quantity));
        PriceLabel.setText(ord.floatTo2dpCurrency(price));
    }
    
    /**
     * Asks the user to confirm the box(-es) he wants to add to his order.
     */
    public void confirmBox(){
        String text = "Add the following " + ord.tempBox.getQuantity() 
                + " box(-es) to your order:\n"
                + "Width: " + ord.tempBox.getWidth() + "cm\n"
                + "Height: " + ord.tempBox.getHeight() + "cm\n"
                + "Length: " + ord.tempBox.getLength() + "cm\n"
                + "Grade: " + ord.tempBox.getGrade() + "\n"
                + "Reinforced Corners: " + ord.tempBox.isReinforcedCorners() + "\n"
                + "Reinforced Bottom: " + ord.tempBox.isReinforcedBottom() + "\n"
                + "Sealable: " + ord.tempBox.isBoxSealable() 
                + "\n\n Total: " + ord.floatTo2dpCurrency(ord.tempBox.getTotalPrice());
        
        int dialogResult = JOptionPane.showConfirmDialog(
                null, text, "Confirm Box(-es)", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(dialogResult == JOptionPane.OK_OPTION){
            this.setVisible(true);
            AddNewItem.setVisible(false);
            ord.addToOrderList();
        }
    }
    
    /**
     * Checks if the user has entered a number (INPUT VALIDATION)
     * @param evt The key the user has typed.
     */
    private void isNumberInput(java.awt.event.KeyEvent evt){
        char c = evt.getKeyChar();
        //If the key is not a digit or it's not backspace or if its not delete key
        if (!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE))){
            evt.consume(); //Consume the key.
        }
        //else do nothing.
    }
    
    /**
     * Disables the bottom and corner checkboxes.
     */
    private void disableReinforcments(){
        BottomCheckbox.setEnabled(false);
        CornerCheckbox.setEnabled(false);
        BottomCheckbox.setSelected(false);
        CornerCheckbox.setSelected(false);
    }
    
    /**
     * Sets the grade sliders values
     * @param min The minimum value for the grade slider
     * @param max The maximum value for the grade slider
     */
    private void setGradeSlider(int min, int max){
        GradeSlider.setMinimum(min);
        GradeSlider.setMaximum(max);
        if (min > GradeSlider.getValue() | max < GradeSlider.getValue()){
            GradeSlider.setValue(min);
        }
    }
    
    /**
     * Show which field is empty
     * @param field - the name of the field.
     */
    public void emptyFieldError(String field){
        String message = "The " + field + " field is empty.\n"
                + "Please check your input and try again.";
        JOptionPane.showMessageDialog(this, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Show which field is wrong and shows the allowed values.
     * @param field - the name of the field.
     * @param min - minimum value allowed for field.
     * @param max - maximum value allowed for field.
     */
    public void wrongInput(String field, int min, int max){
        String message = "The " + field + " field is incorrect.\n"
                + "The value should be between " + min + " and " + max + ".";
        JOptionPane.showMessageDialog(this, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Asks the user whether he is certain he wants to delete the selected boxes
     * @return whether the user wants or not to delete the boxes.
     */
    public boolean confirmRemove(){
        String message = "Are you sure you want to delete selected items?";
        int dialogResult = JOptionPane.showConfirmDialog(null, message, "Confirm Deletion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(dialogResult == JOptionPane.OK_OPTION) return true;
        else return false;
    }
    
    /**
     * Shows an error that the user didn't select anything.
     */
    public void nothingSelectedError() {
        String message = "No Rows Selected!\n";
        JOptionPane.showMessageDialog(this, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Asks the user for confirmation whether to write to file or not.
     * @return whether to write to file.
     */
    public boolean writeToFile() {
        String message = "Are you sure you want to export your order to file?\n"
                + "Order total: " + ord.floatTo2dpCurrency(ord.getOrdTotal());
        int dialogResult = JOptionPane.showConfirmDialog(null, message, "Confirm export", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(dialogResult == JOptionPane.OK_OPTION) return true;
        else return false;
    }
    
    /**
     * Shows that the action has been completed successfully.
     */
    public void popupSuccess() {
        JOptionPane.showMessageDialog(this,"Success!");
    }
    
    /**
     * Shows an error that something went really wrong and the order could
     * not be exported.
     */
    public void popupError(){
        String message = "FAILED TO EXPORT!\n"
                + "Something went wrong, please contact your system administrator.";
        JOptionPane.showMessageDialog(this, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Shows an error that there are no items in the users order.
     */
    public void popupNoItems(){
        String message = "FAILED TO EXPORT!\n"
                + "No Items in your order!";
        JOptionPane.showMessageDialog(this, message, "ERROR", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JFrame AddNewItem;
    public javax.swing.JCheckBox BottomCheckbox;
    private javax.swing.JButton Button_AddBox;
    private javax.swing.JButton Button_CheckOut;
    private javax.swing.JButton Button_EditBox;
    private javax.swing.JButton Button_RemoveBox;
    private javax.swing.JButton CalculateCostButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.ButtonGroup ColourButtons;
    public javax.swing.JRadioButton ColourRadio0;
    public javax.swing.JRadioButton ColourRadio1;
    public javax.swing.JRadioButton ColourRadio2;
    public javax.swing.JCheckBox CornerCheckbox;
    private javax.swing.JLabel CornerWarning;
    public javax.swing.JSlider GradeSlider;
    public javax.swing.JEditorPane HeightInput;
    private javax.swing.JLabel Label_CurrOrd;
    private javax.swing.JLabel Label_Main;
    private javax.swing.JLabel Label_Total;
    public javax.swing.JLabel Label_TotalSum;
    public javax.swing.JEditorPane LengthInput;
    public javax.swing.JTable OrderTable;
    public javax.swing.JLabel PriceLabel;
    public javax.swing.JEditorPane QuantityInput;
    public javax.swing.JCheckBox SealableCheckbox;
    public javax.swing.JEditorPane WidthInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
